
// -------Disposition du jeu-------
        fond = new JPanel(); // represente la fenetre
        fond.setLayout(new GridBagLayout());
        GridBagConstraints c = new GridBagConstraints();
        c.anchor = GridBagConstraints.WEST;
        c.weightx = 1;
        c.weighty = 1;

        munition = new JPanel(); // Partie de gauche de la fenetre
        munition.setLayout(new BorderLayout());
        munition.setBackground(Color.gray);
        munition.setPreferredSize(new Dimension(this.getWidth() / 5, this.getHeight()));

        partie = new JPanel(); // Partie du jeu, a droite de la fenetre
        partie.setLayout(new GridBagLayout());
        partie.setBackground(Color.darkGray);
        partie.setPreferredSize(new Dimension(this.getWidth() * 4 / 5, this.getHeight()));
        // Balle b = new Balle();

        puit = new JPanel();
        puit.setLayout(new BorderLayout());
        puit.setPreferredSize(new Dimension(100, 100));
        puit.setBackground(Color.black);
        puit.setBorder(BorderFactory.createLineBorder(Color.white, 5));
        puit.setVisible(true);
        partie.add(puit, c);

        canon = new JPanel() {
            @Override
            public void paint(Graphics g) {
                // TODO Auto-generated method stub
                /*
                 * BufferedImage img = new BufferedImage(20,50,BufferedImage.TYPE_INT_RGB);
                 * try {
                 * img = ImageIO.read(new File("src/view/pomme.jfif"));
                 * } catch (IOException e) {
                 * // TODO Auto-generated catch block
                 * e.printStackTrace();
                 * }
                 */
                super.paint(g);
                Graphics2D g2d = (Graphics2D) g;
                int widthBase = 150;
                int heightBase = 150;
                Path2D.Double ligne2 = new Path2D.Double();
                ligne2.moveTo(this.getWidth() / 2, 0);
                ligne2.lineTo(mouseX - munition.getWidth() - canon.getX(), mouseY);
                g2d.setStroke(new BasicStroke(5));
                GradientPaint gp = new GradientPaint(colorX, colorX, Color.yellow, colorY, colorX, Color.cyan, true);
                g2d.setPaint(gp);
                g2d.draw(ligne2);
                g2d.setStroke(new BasicStroke(1));
                g2d.setPaint(null);
                g2d.setColor(Color.black);
                Arc2D.Double arc2 = new Arc2D.Double(this.getWidth() / 2 - widthBase / 2, -heightBase / 2, widthBase,
                        heightBase, 180, 180, Arc2D.OPEN);
                g2d.draw(arc2);

                Rectangle rect2 = (new Rectangle(this.getWidth() / 2 - widthBase / 10, heightBase / 3, widthBase / 5,
                        heightBase / 2));

                g2d.rotate(Math.toRadians(angle), this.getWidth() / 2, 0);
                g2d.draw(rect2);

                /*
                 * try {
                 * img = ImageIO.read(new File("src/view/banane.jfif"));
                 * } catch (IOException e) {
                 * // TODO Auto-generated catch block
                 * e.printStackTrace();
                 * }
                 * int x = this.getWidth()/2+(50-10);
                 * int y = 30;
                 */
                /*
                 * g2d.setClip(rect2);
                 * g2d.drawImage(img, x, y,20,50, this);
                 */
                g2d.rotate(Math.toRadians(-angle), this.getWidth() / 2, 0);

                double theta = Math.toRadians(angle);
                double x = (this.getWidth() / 2) - (5 * heightBase / 6) * Math.sin(theta) - 10;
                double y = (5 * heightBase / 6) * Math.cos(theta) - 10;
                /*
                 * Formule :
                 * newX = centerX + (point2x-centerX)*Math.cos(x) -
                 * (point2y-centerY)*Math.sin(x);
                 * newY = centerY + (point2x-centerX)*Math.sin(x) +
                 * (point2y-centerY)*Math.cos(x)
                 */

                // b.x = (int) x;
                // b.y = (int) y;

                // g.fillOval((int) b.x, (int) b.y, 10, 10);
                g2d.dispose();
            }
        };
        JLabel a = new JLabel();
        canon.add(a);
        canon.setPreferredSize(new Dimension(100, 100));
        // canon.add(puit);

        c.anchor = GridBagConstraints.NORTH;
        // c.fill = GridBagConstraints.BOTH;
        partie.add(canon, c);
        fond.add(munition, c);
        c.anchor = GridBagConstraints.WEST;
        fond.add(partie, c);
        this.addKeyListener(new KeyAdapter() {
            public void keyPressed(KeyEvent e) {
                int keyCode = e.getKeyCode();
                if (keyCode == KeyEvent.VK_SPACE) {
                    balleEnJeu = true;
                }
            }
        });

        munition.add(leave, BorderLayout.SOUTH);
        leave.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                System.exit(0);
            }
        });
        this.add(fond);
        this.setVisible(true);
        // canon.setPreferredSize(new Dimension(partie.getWidth(), partie.getHeight()));
        canon.setBackground(Color.lightGray);

        while (enJeu) {
            calculeAngle();
            a.setText(angle + "");

            colorX -= 1 % 25;
            colorY -= 1 % 25;
            canon.repaint();
            if (balleEnJeu) {
                // b.deplacement();
            }
            try {
                Thread.sleep(30);
            } catch (InterruptedException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }